// <auto-generated />
using System;
using CrossConvo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrossConvo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrossConvo.Models.Ami", b =>
                {
                    b.Property<int>("idAmi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idAmi"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("idAmi");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Amis");
                });

            modelBuilder.Entity("CrossConvo.Models.Commentaire", b =>
                {
                    b.Property<int>("CommentaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentaireId"));

                    b.Property<string>("Contenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("CommentaireId");

                    b.HasIndex("PostId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Commentaires");
                });

            modelBuilder.Entity("CrossConvo.Models.Groupe", b =>
                {
                    b.Property<int>("GroupeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupeId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("GroupeId");

                    b.ToTable("Groupes");
                });

            modelBuilder.Entity("CrossConvo.Models.GroupeUtilisateur", b =>
                {
                    b.Property<int>("GroupeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("GroupeId", "UtilisateurId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("GroupesUtilisateurs");
                });

            modelBuilder.Entity("CrossConvo.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Contenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CrossConvo.Models.Utilisateur", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtilisateurId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("UtilisateurId");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("CrossConvo.Models.Ami", b =>
                {
                    b.HasOne("CrossConvo.Models.Utilisateur", "Utilisateur")
                        .WithMany("Amis")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("CrossConvo.Models.Commentaire", b =>
                {
                    b.HasOne("CrossConvo.Models.Post", "Post")
                        .WithMany("Commentaires")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrossConvo.Models.Utilisateur", "Utilisateur")
                        .WithMany("Commentaires")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Post");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("CrossConvo.Models.GroupeUtilisateur", b =>
                {
                    b.HasOne("CrossConvo.Models.Groupe", "Groupe")
                        .WithMany("GroupesUtilisateurs")
                        .HasForeignKey("GroupeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrossConvo.Models.Utilisateur", "Utilisateur")
                        .WithMany("GroupesUtilisateurs")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groupe");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("CrossConvo.Models.Post", b =>
                {
                    b.HasOne("CrossConvo.Models.Utilisateur", "Utilisateur")
                        .WithMany("Posts")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("CrossConvo.Models.Groupe", b =>
                {
                    b.Navigation("GroupesUtilisateurs");
                });

            modelBuilder.Entity("CrossConvo.Models.Post", b =>
                {
                    b.Navigation("Commentaires");
                });

            modelBuilder.Entity("CrossConvo.Models.Utilisateur", b =>
                {
                    b.Navigation("Amis");

                    b.Navigation("Commentaires");

                    b.Navigation("GroupesUtilisateurs");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
